#!/bin/bash

# Convert CIDR to subnet mask
cidr_to_mask() {
    local cidr=$1
    local mask=""
    for i in {1..4}; do
        if [ $cidr -ge 8 ]; then
            mask+="255"
        elif [ $cidr -gt 0 ]; then
            mask+=$((256 - 2**(8-cidr)))
        else
            mask+="0"
        fi
        [ $i -lt 4 ] && mask+="."
        cidr=$((cidr-8))
        [ $cidr -lt 0 ] && cidr=0
    done
    echo $mask
}

# Convert subnet mask to CIDR
mask_to_cidr() {
    local mask=$1
    local cidr=0
    IFS='.' read -ra octets <<< "$mask"
    for octet in "${octets[@]}"; do
        case $octet in
            255) cidr=$((cidr+8));;
            254) cidr=$((cidr+7));;
            252) cidr=$((cidr+6));;
            248) cidr=$((cidr+5));;
            240) cidr=$((cidr+4));;
            224) cidr=$((cidr+3));;
            192) cidr=$((cidr+2));;
            128) cidr=$((cidr+1));;
            0) ;;
            *) echo "Invalid subnet mask"; exit 1;;
        esac
    done
    echo $cidr
}

# Main process
if [ $# -ne 1 ]; then
    echo "Usage: $0 <CIDR or subnet mask>"
    exit 1
fi

input=$1

if [[ $input =~ ^[0-9]+$ && $input -le 32 ]]; then
    echo "CIDR: $input"
    echo "Subnet mask: $(cidr_to_mask $input)"
elif [[ $input =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    echo "Subnet mask: $input"
    echo "CIDR: $(mask_to_cidr $input)"
else
    echo "Invalid input. Please enter a CIDR or subnet mask."
    exit 1